/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobOfferService } from "../jobOffer.service";
import { JobOfferCreateInput } from "./JobOfferCreateInput";
import { JobOffer } from "./JobOffer";
import { JobOfferFindManyArgs } from "./JobOfferFindManyArgs";
import { JobOfferWhereUniqueInput } from "./JobOfferWhereUniqueInput";
import { JobOfferUpdateInput } from "./JobOfferUpdateInput";

export class JobOfferControllerBase {
  constructor(protected readonly service: JobOfferService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobOffer })
  async createJobOffer(
    @common.Body() data: JobOfferCreateInput
  ): Promise<JobOffer> {
    return await this.service.createJobOffer({
      data: {
        ...data,

        department: data.department
          ? {
              connect: data.department,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        requirements: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobOffer] })
  @ApiNestedQuery(JobOfferFindManyArgs)
  async jobOffers(@common.Req() request: Request): Promise<JobOffer[]> {
    const args = plainToClass(JobOfferFindManyArgs, request.query);
    return this.service.jobOffers({
      ...args,
      select: {
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        requirements: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobOffer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jobOffer(
    @common.Param() params: JobOfferWhereUniqueInput
  ): Promise<JobOffer | null> {
    const result = await this.service.jobOffer({
      where: params,
      select: {
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        requirements: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobOffer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJobOffer(
    @common.Param() params: JobOfferWhereUniqueInput,
    @common.Body() data: JobOfferUpdateInput
  ): Promise<JobOffer | null> {
    try {
      return await this.service.updateJobOffer({
        where: params,
        data: {
          ...data,

          department: data.department
            ? {
                connect: data.department,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          department: {
            select: {
              id: true,
            },
          },

          description: true,
          id: true,
          requirements: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobOffer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJobOffer(
    @common.Param() params: JobOfferWhereUniqueInput
  ): Promise<JobOffer | null> {
    try {
      return await this.service.deleteJobOffer({
        where: params,
        select: {
          createdAt: true,

          department: {
            select: {
              id: true,
            },
          },

          description: true,
          id: true,
          requirements: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
