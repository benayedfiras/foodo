/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobOffer } from "./JobOffer";
import { JobOfferCountArgs } from "./JobOfferCountArgs";
import { JobOfferFindManyArgs } from "./JobOfferFindManyArgs";
import { JobOfferFindUniqueArgs } from "./JobOfferFindUniqueArgs";
import { CreateJobOfferArgs } from "./CreateJobOfferArgs";
import { UpdateJobOfferArgs } from "./UpdateJobOfferArgs";
import { DeleteJobOfferArgs } from "./DeleteJobOfferArgs";
import { Department } from "../../department/base/Department";
import { JobOfferService } from "../jobOffer.service";
@graphql.Resolver(() => JobOffer)
export class JobOfferResolverBase {
  constructor(protected readonly service: JobOfferService) {}

  async _jobOffersMeta(
    @graphql.Args() args: JobOfferCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobOffer])
  async jobOffers(
    @graphql.Args() args: JobOfferFindManyArgs
  ): Promise<JobOffer[]> {
    return this.service.jobOffers(args);
  }

  @graphql.Query(() => JobOffer, { nullable: true })
  async jobOffer(
    @graphql.Args() args: JobOfferFindUniqueArgs
  ): Promise<JobOffer | null> {
    const result = await this.service.jobOffer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobOffer)
  async createJobOffer(
    @graphql.Args() args: CreateJobOfferArgs
  ): Promise<JobOffer> {
    return await this.service.createJobOffer({
      ...args,
      data: {
        ...args.data,

        department: args.data.department
          ? {
              connect: args.data.department,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => JobOffer)
  async updateJobOffer(
    @graphql.Args() args: UpdateJobOfferArgs
  ): Promise<JobOffer | null> {
    try {
      return await this.service.updateJobOffer({
        ...args,
        data: {
          ...args.data,

          department: args.data.department
            ? {
                connect: args.data.department,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobOffer)
  async deleteJobOffer(
    @graphql.Args() args: DeleteJobOfferArgs
  ): Promise<JobOffer | null> {
    try {
      return await this.service.deleteJobOffer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Department, {
    nullable: true,
    name: "department",
  })
  async getDepartment(
    @graphql.Parent() parent: JobOffer
  ): Promise<Department | null> {
    const result = await this.service.getDepartment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
